
"init.vim file of Patrick Wieker (Filzball)

let mapleader = ","

"enable Plugin manager Plug.
" to disable a Plugin temporarily use this:
" 	Plug 'foo/bar', {'on': []}

call plug#begin('~/.local/share/nvim/plugged')

Plug 'Shougo/deoplete.nvim', {'do': 'UpdateRemotePlugins'}
Plug 'kevinhwang91/rnvimr', {'do': 'make sync'}
Plug 'davidhalter/jedi-vim'
Plug 'zchee/deoplete-jedi'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'morhetz/gruvbox'
Plug 'jiangmiao/auto-pairs'
Plug 'scrooloose/nerdcommenter'
Plug 'sbdchd/neoformat'
Plug 'scrooloose/nerdtree'
Plug 'neomake/neomake'
Plug 'machakann/vim-highlightedyank'
"Plug 'tmhedberg/SimpylFold'
Plug 'joshdick/onedark.vim'
Plug 'altercation/vim-colors-solarized'
Plug 'dracula/vim', { 'as': 'dracula' }

call plug#end()

source $HOME/.config/nvim/plug-config/rnvimr.vim

set encoding=utf-8




" Settings for autocompletion with deoplete
" for more options check ":h deoplete-options"
" Dependencies for deoplete-jedi (pynvim and jedi) installed with pacman as
" python-pynvim and python-jedi

let g:deoplete#enable_at_startup = 1

" automatically close the parameter hints when done
autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif

" browse through the suggestions list with <Tab> and <Shift-Tab>
inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
inoremap <expr><S-tab> pumvisible() ? "\<c-p>" : "\<tab>"



set splitbelow splitright
set number relativenumber



" set the vim-airline theme
 "let g:airline_theme='gruvbox'



" NERDCommenter settings
" add a space after the comment symbol
" let g:NERDSpaceDelims = 1
"Align comment symbols left
let g:NERDDefaultAlign = 'left'
"Trim whitespace after uncommenting a line or selection
let g:NERDTrimTrailingWhitespace = 1
"" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDCommenterToggle = 1



" Neoformat automatic code formater (uses yapf (installed with pip))
" Enable alignment
let g:neoformat_basic_format_align = 1

" Enable tab to spaces conversion
let g:neoformat_basic_format_retab = 1

" Enable trimmming of trailing whitespace
let g:neoformat_basic_format_trim = 1



" goto definition from jedi-vim
"" Usage:
" 
    "<leader>d: go to definition
    "K: check documentation of class or method
    "<leader>n: show the usage of a name in current file
    "<leader>r: rename a name
    "
 "disable autocompletion, cause we use deoplete for completion
let g:jedi#completions_enabled = 0

" open the go-to function in split, not another buffer
let g:jedi#use_splits_not_buffers = "right"



" NERDTree Settings
" start nerdtree when no file is specified at startup
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" open nerdtree on Ctrl + n
map <C-n> :NERDTreeToggle<CR>

" close vim when nerdtree is the last window that is open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif



" vim-airline fix for proper shape rendering
let g:airline_powerline_fonts = 1



" python-pylint Syntax checking with neomake for nvim
let g:neomake_python_enabled_makers = ['pylint']

" Use this to enable pylint to check automatically
" call neomake#configure#automake('nrwi', 500)

" Neomake/Pylint check on F8
nmap <F8> :Neomake<CR>



"higlighted yank options
" set highlight duration time to 1000 ms, i.e., 1 second
let g:highlightedyank_highlight_duration = 1000



"Simply Fold usage:
	" zo: open fold
	" zO: open fold recursively
	" zc: close fold
	" zC: close fold recursively



" colorscheme settings
"colorscheme gruvbox

syntax enable
"set background=dark
colorscheme solarized

"colorscheme onedark
"let g:airline_theme='onedark'
"
"
"colorscheme dracula

" better split navigation
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" better tab navigation
" Alt + h and Alt + l to move between tabs
nnoremap <A-h> :tabprevious<CR>
nnoremap <A-l> :tabnext<CR>

" Figure out the system Python for Neovim.
if exists("$VIRTUAL_ENV")
    let g:python3_host_prog=substitute(system("which -a python3 | head -n2 | tail -n1"), "\n", '', 'g')
else
    let g:python3_host_prog=substitute(system("which python3"), "\n", '', 'g')
endif



" Run a python script directly from the editor with leader space
nnoremap <silent> <leader><space> :w<CR>:!clear<CR>:!python %<CR>
